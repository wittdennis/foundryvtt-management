# yaml-language-server: $schema=https://raw.githubusercontent.com/argoproj/argo-workflows/main/api/jsonschema/schema.json
---
apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: foundry-offsite-backup
spec:
  schedule: "30 3 * * *"
  concurrencyPolicy: "Replace"
  startingDeadlineSeconds: 0
  successfulJobsHistoryLimit: 7
  workflowSpec:
    entrypoint: backup
    onExit: exit-handler
    artifactGC:
      strategy: OnWorkflowDeletion
      serviceAccountName: foundry-workflows
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    volumes:
      - name: foundry-data
        persistentVolumeClaim:
          claimName: foundry-data-pvc
      - name: tmp
        emptyDir: {}
    templates:
      - name: backup
        steps:
          - - name: scale-down
              arguments:
                parameters:
                  - name: deployment
                    value: foundry
                  - name: replicaCount
                    value: "0"
              templateRef:
                template: scale-deployment
                name: scale-deployment
          - - name: create-backup
              template: archive-data
          - - name: upload-backup
              template: upload-backup
              arguments:
                artifacts:
                  - name: backup-archive
                    from: "{{steps.create-backup.outputs.artifacts.backup-archive}}"

      - name: exit-handler
        steps:
          - - name: scale-up
              arguments:
                parameters:
                  - name: deployment
                    value: foundry
                  - name: replicaCount
                    value: "1"
              templateRef:
                template: scale-deployment
                name: scale-deployment

      - name: archive-data
        serviceAccountName: foundry-workflows
        outputs:
          artifacts:
            - name: backup-archive
              path: /tmp/foundry-data.tar.xz
              s3:
                key: "{{workflow.name}}/foundry-data.tar.xz"
        container:
          image: denniswitt/tar:0.1.1 # renovate
          workingDir: /tmp
          command:
            - sh
            - -c
          args:
            - |
              set -eux

              tar cfJv foundry-data.tar.xz /foundry-data/Data
              du -sch foundry-data.tar.xz
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /foundry-data
              name: foundry-data
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault

      - name: upload-backup
        serviceAccountName: foundry-workflows
        inputs:
          artifacts:
            - name: backup-archive
              path: /tmp/foundry-data.tar.xz
        container:
          image: restic/restic:0.17.2 # renovate
          command: [sh, -c]
          args:
            - |
              restic init --no-cache || true
              restic backup --no-cache --host foundry-data /tmp/foundry-data.tar.xz
              restic forget --no-cache --keep-last 90 --prune
          env:
            - name: AZURE_ACCOUNT_NAME
              valueFrom:
                secretKeyRef:
                  name: backup-settings
                  key: azure-account-name
            - name: AZURE_ACCOUNT_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-settings
                  key: azure-account-key
            - name: RESTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backup-settings
                  key: restic-password
            - name: RESTIC_REPOSITORY
              value: azure:foundry:/
          volumeMounts:
            - mountPath: /tmp
              name: tmp
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
